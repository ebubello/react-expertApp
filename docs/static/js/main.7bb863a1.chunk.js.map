{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qMAIaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEZC,mBAAS,IAFG,mBAEzCC,EAFyC,KAE7BC,EAF6B,KAkBhD,OACE,oCAEE,0BAAMC,SAXW,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAYP,GAAZ,mBAA2BO,OACzCN,EAAc,OASZ,2BAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAlBlB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,a,uBCTZG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEKI,MAAMF,GAFX,cAEbG,EAFa,gBAGIA,EAAUC,OAHd,uBAGXC,EAHW,EAGXA,KAGFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC3B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAgBZM,GAhBY,4CAAH,sDCCTO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IACvC,OACE,yBAAKc,UAAU,iDACb,yBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,2BAAIA,KCAGO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EACZd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAiBtC,OAXAC,qBAAU,WACNxB,EAAQC,GACHwB,MAAK,SAAAd,GACFY,EAAS,CACLf,KAAMG,EACNU,SAAS,SAGtB,CAACpB,IAGGqB,EDZsBI,CAAazB,GAAhCa,EAJ2B,EAIhCN,KAAaa,EAJmB,EAInBA,QAEpB,OACE,oCACE,gCAAMpB,EAAN,KACA,yBAAKgB,UAAU,aAEXI,GAAW,uBAAGJ,UAAU,oCAAb,WAEb,4BAEIH,EAAOJ,KAAI,SAACC,GAAD,OACX,kBAAC,EAAD,eACIgB,IAAKhB,EAAIC,IACLD,WElBPiB,EAAe,WAAM,MAEIzC,mBAAS,CAAC,cAFd,mBAEzB0C,EAFyB,KAEb3C,EAFa,KAWhC,OACE,oCAEE,4CAEA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAEA,4BACG2C,EAAWnB,KAAI,SAACmB,GAAD,OACd,kBAAC,EAAD,CAASF,IAAKE,EAAY5B,SAAU4B,U,MCrB9CC,IAASC,OAAQ,kBAAE,EAAF,MAAqBC,SAASC,eAAe,U","file":"static/js/main.7bb863a1.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropsTypes from 'prop-types';\r\n\r\n//Pasamos parametros por desestructuración desde AddCategories a GifExpertApp.\r\nexport const AddCategory = ({ setCategories }) => {\r\n  //Manejo del estado del INPUT.\r\n  const [inputValue, setinputValue] = useState('');\r\n\r\n  //Input Change\r\n  const handleInputChange = (e) => {\r\n    setinputValue(e.target.value);\r\n  };\r\n\r\n  //Submit\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (inputValue.trim().length > 2) {\r\n      setCategories((cats) => [ inputValue, ...cats]); //Add nuevo elemento al array de Categorias.\r\n      setinputValue('');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n    \r\n      <form onSubmit={handleSubmit}>\r\n     \r\n        <input type='text' value={inputValue} onChange={handleInputChange} />\r\n \r\n      </form>\r\n      \r\n    </>\r\n  );\r\n\r\n  // Para que si o si envien las propiedades necesarias.\r\n};\r\n\r\n// Para que si o si envien las propiedades necesarias.\r\nAddCategory.propTypes = {\r\n  setCategories: PropsTypes.func.isRequired,\r\n};\r\n","  //Conecto con la API\r\n  export const getGifs = async(category) => {\r\n      const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=DE643rERgo66Or6ltqgKrg1beMMAZhxG`;\r\n      const respuesta = await fetch(url);\r\n      const { data } = await respuesta.json();\r\n\r\n      //Guardo la información de la API en gifs.\r\n      const gifs = data.map((img) => {\r\n          return {\r\n              id: img.id,\r\n              title: img.title,\r\n              url: img.images?.downsized_medium.url,\r\n          }\r\n      })\r\n\r\n      //console.log(gifs);\r\n      //setImages(gifs); // Seteo con la infor de \"gifs\".\r\n      return gifs;\r\n  };","import React from 'react';\r\n\r\nexport const GifGridItem = ({ id, title, url }) => {\r\n  return (\r\n    <div className='card column animate__animated animate__bounce'>\r\n      <img src={url} alt={title} />\r\n      <p>{title}</p>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from '../components/GifGridItem';\r\n// import {getGifs} from '../helpers/getGifs';\r\n\r\n\r\nexport const GifGrid = ({ category }) => {\r\n  // const [images, setImages] = useState([]);\r\n  // //Se inicia cuando el componente se ejecuta por primera vez.\r\n  \r\n  const {data:images, loading} = useFetchGifs(category);\r\n\r\n  return (\r\n    <>\r\n      <h3> {category} </h3>\r\n      <div className='card-grid'>\r\n        {\r\n          loading && <p className=\"animate__animated animate__flash\">Loading</p>\r\n        }\r\n        <ol>\r\n          {\r\n            images.map((img) => (\r\n            <GifGridItem \r\n                key={img.id} \r\n                {...img} \r\n                />\r\n            ))\r\n          }\r\n        </ol>\r\n      </div> \r\n      \r\n    </>\r\n  );\r\n};\r\n","import { useState, useEffect } from 'react'\r\nimport { getGifs } from '../helpers/getGifs'\r\n\r\n//Custom HOOK\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs(category)\r\n            .then(img => {\r\n                setState({\r\n                    data: img,\r\n                    loading: false\r\n                })\r\n            })\r\n    }, [category]);\r\n\r\n\r\n    return state;\r\n}","//rafc para generar el componente automaticamente.\r\n\r\nimport React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n  //const categories = ['One Punch', 'Samurai X', 'Dragon Ball Z'];\r\n  const [categories, setCategories] = useState(['One Punch']);\r\n\r\n  //   const handleAdd = () => {\r\n  //     setCategories([...categories, 'HunterXHunter']); //Forma correcta de mutar el State.\r\n\r\n  //     //Otra Opción valida\r\n  //     //setCategories((cats) => [...cats, 'HunterXHunter']);\r\n  //   };\r\n\r\n  return (\r\n    <>\r\n   \r\n      <h2>GifExpertApp</h2>\r\n      {/* Recibo desde el componente addCategories, input el nuevo valor agregado a categories */}\r\n      <AddCategory setCategories={setCategories} />\r\n      <hr />\r\n      {/* <button onClick={handleAdd}>Boton</button> */}\r\n      <ol>\r\n        {categories.map((categories) => (\r\n          <GifGrid key={categories} category={categories} />\r\n        ))}\r\n      </ol>\r\n    \r\n    </>\r\n  );\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render( < GifExpertApp / > , document.getElementById('root'));"],"sourceRoot":""}